package monchickey_test

import (
    "fmt"
    "testing"

    "github.com/zengzhiying/gomonchickey"
    "github.com/json-iterator/go"
)

// go test -v polygons_point_relation_test.go

type Coordinate monchickey.Coordinate

func PolygonContain(pointSet []Coordinate, p Coordinate) (int, error) {
    newPointSet := make([]monchickey.Coordinate, len(pointSet))
    for i, c := range pointSet {
        newPointSet[i] = monchickey.Coordinate(c)
    }
    return monchickey.PolygonContain(newPointSet, monchickey.Coordinate(p))
}

func TestPolygonsPointRelation(t *testing.T) {

    // fmt.Println(pointSlopeForm(Coordinate{x: 3, y: 6}))
    // fmt.Println(twoPointForm(Coordinate{x: -2, y: -2}, Coordinate{x: -2, y: -2}))
    // fmt.Println(twoPointForm(Coordinate{x: -2, y: 3}, Coordinate{x: -2, y: 6}))
    // fmt.Println(twoPointForm(Coordinate{x: -2, y: 3}, Coordinate{x: -1, y: 3}))
    // fmt.Println(twoPointForm(Coordinate{x: -2, y: 3}, Coordinate{x: 2, y: 6}))


    // fmt.Println(systemOfBinaryLinearQquationsSolving(
    //     GeneralParameter{A: 2, B: 1, C: 3},
    //     GeneralParameter{A: 4, B: 2, C: 6},
    // ))
    // fmt.Println(systemOfBinaryLinearQquationsSolving(
    //     GeneralParameter{A: 2, B: 1, C: 3},
    //     GeneralParameter{A: 2, B: 1, C: 6},
    // ))
    // fmt.Println(systemOfBinaryLinearQquationsSolving(
    //     GeneralParameter{A: 2, B: 3, C: 6},
    //     GeneralParameter{A: 6, B: 2, C: 1},
    // ))

    // fmt.Println("-----------------")

    // fmt.Println(lineContain(GeneralParameter{3, -2, 5}, Coordinate{1, 1}))    // false
    // fmt.Println(lineContain(GeneralParameter{3, -2, 5}, Coordinate{-1, 1}))   // true

    // fmt.Println("-----------------")

    // (434, 196), (739, 339), (553, 478), (323, 299)
    // python
    // cnt = [[(434, 196)],[(739, 339)], [(553, 478)], [(323, 299)]]
    // cnt = numpy.array(cnt)
    // cv2.pointPolygonTest(cnt, (585, 362), False)
    // cv2.pointPolygonTest(cnt, (932, 337), False)
    // 内部(585, 362), (432, 367), (434, 250)
    // 外部(378, 541), (740, 214), (932, 337)
    pointSet := []Coordinate{
        Coordinate{434, 196},
        Coordinate{739, 339},
        Coordinate{553, 478},
        Coordinate{323, 299},
    }
    fmt.Println(PolygonContain(pointSet, Coordinate{585, 362}))
    fmt.Println(PolygonContain(pointSet, Coordinate{432, 367}))
    fmt.Println(PolygonContain(pointSet, Coordinate{434, 250}))
    fmt.Println(PolygonContain(pointSet, Coordinate{378, 541}))
    fmt.Println(PolygonContain(pointSet, Coordinate{740, 214}))
    fmt.Println(PolygonContain(pointSet, Coordinate{932, 337}))

    fmt.Println("-----------------")

    pointSet2 := []Coordinate{
        Coordinate{1, 1},
        Coordinate{1, 4},
        Coordinate{4, 4},
        Coordinate{4, 1},
    }
    fmt.Println(PolygonContain(pointSet2, Coordinate{1, 1})) // 4  边上
    fmt.Println(PolygonContain(pointSet2, Coordinate{2, 2})) // 2  内部
    fmt.Println(PolygonContain(pointSet2, Coordinate{3, 3})) // 2  内部
    fmt.Println(PolygonContain(pointSet2, Coordinate{4, 4})) // 2  边上
    fmt.Println(PolygonContain(pointSet2, Coordinate{2, 3})) // 1  内部

    fmt.Println("-----------------")

    cnt := `[[[67, 31]], [[66, 32]], [[66, 33]], [[65, 34]], [[65, 35]], [[64, 36]], [[63, 37]], [[62, 38]], [[61, 39]], [[61, 40]], [[60, 41]], [[59, 42]], [[59, 43]], [[58, 44]], [[57, 45]], [[57, 46]], [[56, 47]], [[56, 48]], [[55, 49]], [[54, 50]], [[53, 51]], [[52, 52]], [[51, 53]], [[50, 54]], [[49, 55]], [[48, 56]], [[47, 57]], [[46, 58]], [[45, 58]], [[44, 59]], [[43, 60]], [[42, 60]], [[41, 61]], [[40, 61]], [[39, 62]], [[38, 62]], [[37, 62]], [[36, 63]], [[35, 64]], [[34, 64]], [[33, 64]], [[32, 65]], [[31, 65]], [[30, 66]], [[29, 66]], [[28, 66]], [[27, 66]], [[26, 67]], [[25, 67]], [[24, 67]], [[23, 67]], [[22, 67]], [[21, 67]], [[20, 67]], [[19, 67]], [[18, 68]], [[17, 69]], [[17, 70]], [[17, 71]], [[17, 72]], [[17, 73]], [[18, 74]], [[19, 74]], [[20, 74]], [[21, 74]], [[22, 74]], [[23, 74]], [[24, 74]], [[25, 74]], [[26, 74]], [[27, 74]], [[28, 74]], [[29, 74]], [[30, 73]], [[31, 73]], [[32, 72]], [[33, 72]], [[34, 72]], [[35, 72]], [[36, 71]], [[37, 71]], [[38, 70]], [[39, 70]], [[40, 69]], [[41, 69]], [[42, 69]], [[43, 68]], [[44, 67]], [[45, 67]], [[46, 66]], [[47, 66]], [[48, 65]], [[49, 64]], [[50, 64]], [[51, 63]], [[52, 62]], [[53, 61]], [[54, 60]], [[55, 59]], [[56, 58]], [[57, 57]], [[58, 56]], [[59, 55]], [[60, 54]], [[61, 53]], [[62, 54]], [[62, 55]], [[62, 56]], [[62, 57]], [[62, 58]], [[62, 59]], [[62, 60]], [[61, 61]], [[61, 62]], [[61, 63]], [[61, 64]], [[61, 65]], [[60, 66]], [[60, 67]], [[60, 68]], [[60, 69]], [[60, 70]], [[59, 71]], [[59, 72]], [[59, 73]], [[59, 74]], [[58, 75]], [[58, 76]], [[58, 77]], [[57, 78]], [[57, 79]], [[57, 80]], [[56, 81]], [[56, 82]], [[56, 83]], [[55, 84]], [[55, 85]], [[54, 86]], [[54, 87]], [[53, 88]], [[53, 89]], [[53, 90]], [[52, 91]], [[52, 92]], [[51, 93]], [[51, 94]], [[50, 95]], [[50, 96]], [[50, 97]], [[49, 98]], [[48, 99]], [[48, 100]], [[47, 101]], [[47, 102]], [[46, 103]], [[45, 103]], [[44, 103]], [[43, 104]], [[42, 104]], [[41, 104]], [[40, 104]], [[39, 104]], [[38, 105]], [[37, 105]], [[36, 105]], [[35, 106]], [[34, 106]], [[33, 106]], [[32, 107]], [[31, 107]], [[30, 108]], [[29, 108]], [[28, 108]], [[27, 109]], [[26, 109]], [[25, 110]], [[24, 110]], [[23, 111]], [[22, 111]], [[21, 112]], [[20, 113]], [[19, 114]], [[18, 115]], [[17, 115]], [[16, 116]], [[15, 117]], [[14, 118]], [[13, 119]], [[13, 120]], [[12, 121]], [[12, 122]], [[11, 123]], [[11, 124]], [[11, 125]], [[11, 126]], [[11, 127]], [[10, 128]], [[10, 129]], [[10, 130]], [[10, 131]], [[11, 132]], [[12, 133]], [[13, 134]], [[13, 135]], [[14, 136]], [[15, 137]], [[16, 138]], [[17, 139]], [[18, 139]], [[19, 140]], [[20, 140]], [[21, 140]], [[22, 140]], [[23, 140]], [[24, 140]], [[25, 140]], [[26, 140]], [[27, 140]], [[28, 140]], [[29, 139]], [[30, 139]], [[31, 139]], [[32, 138]], [[33, 138]], [[34, 137]], [[35, 136]], [[36, 135]], [[37, 134]], [[38, 133]], [[39, 132]], [[40, 131]], [[41, 130]], [[42, 129]], [[42, 128]], [[42, 127]], [[43, 126]], [[44, 125]], [[45, 124]], [[45, 123]], [[46, 122]], [[47, 121]], [[47, 120]], [[47, 119]], [[48, 118]], [[48, 117]], [[49, 116]], [[50, 115]], [[50, 114]], [[50, 113]], [[51, 112]], [[51, 111]], [[52, 110]], [[53, 109]], [[54, 109]], [[55, 109]], [[56, 109]], [[57, 109]], [[58, 109]], [[59, 108]], [[60, 108]], [[61, 108]], [[62, 108]], [[63, 108]], [[64, 108]], [[65, 107]], [[66, 107]], [[67, 107]], [[68, 107]], [[69, 107]], [[70, 106]], [[71, 106]], [[72, 106]], [[73, 106]], [[74, 105]], [[75, 105]], [[76, 104]], [[77, 104]], [[78, 103]], [[79, 103]], [[80, 103]], [[81, 102]], [[82, 102]], [[83, 102]], [[84, 101]], [[85, 100]], [[86, 100]], [[87, 99]], [[88, 99]], [[89, 98]], [[90, 97]], [[91, 96]], [[92, 95]], [[93, 95]], [[94, 94]], [[95, 94]], [[96, 93]], [[97, 92]], [[98, 91]], [[99, 91]], [[100, 90]], [[101, 89]], [[102, 88]], [[103, 87]], [[104, 86]], [[104, 85]], [[104, 84]], [[104, 83]], [[104, 82]], [[103, 81]], [[102, 81]], [[101, 81]], [[100, 81]], [[99, 81]], [[98, 82]], [[97, 83]], [[96, 84]], [[95, 85]], [[94, 85]], [[93, 86]], [[92, 87]], [[91, 88]], [[90, 88]], [[89, 89]], [[88, 89]], [[87, 90]], [[86, 91]], [[85, 92]], [[84, 93]], [[83, 93]], [[82, 94]], [[81, 94]], [[80, 95]], [[79, 95]], [[78, 96]], [[77, 96]], [[76, 97]], [[75, 97]], [[74, 97]], [[73, 98]], [[72, 98]], [[71, 99]], [[70, 99]], [[69, 99]], [[68, 100]], [[67, 100]], [[66, 100]], [[65, 100]], [[64, 100]], [[63, 101]], [[62, 101]], [[61, 101]], [[60, 101]], [[59, 101]], [[58, 101]], [[57, 102]], [[56, 101]], [[56, 100]], [[57, 99]], [[57, 98]], [[57, 97]], [[58, 96]], [[58, 95]], [[59, 94]], [[59, 93]], [[60, 92]], [[60, 91]], [[60, 90]], [[61, 89]], [[61, 88]], [[62, 87]], [[62, 86]], [[62, 85]], [[63, 84]], [[63, 83]], [[64, 82]], [[64, 81]], [[64, 80]], [[64, 79]], [[65, 78]], [[65, 77]], [[66, 76]], [[66, 75]], [[66, 74]], [[66, 73]], [[66, 72]], [[67, 71]], [[67, 70]], [[67, 69]], [[67, 68]], [[67, 67]], [[68, 66]], [[68, 65]], [[68, 64]], [[68, 63]], [[68, 62]], [[68, 61]], [[69, 60]], [[69, 59]], [[69, 58]], [[69, 57]], [[69, 56]], [[70, 55]], [[69, 54]], [[70, 53]], [[70, 52]], [[70, 51]], [[71, 50]], [[71, 49]], [[71, 48]], [[71, 47]], [[71, 46]], [[72, 45]], [[72, 44]], [[72, 43]], [[72, 42]], [[72, 41]], [[72, 40]], [[72, 39]], [[73, 38]], [[73, 37]], [[73, 36]], [[73, 35]], [[73, 34]], [[73, 33]], [[72, 32]], [[71, 31]], [[70, 31]], [[69, 31]], [[68, 31]]]`
    var ps [][][]int
    if err := jsoniter.Unmarshal([]byte(cnt), &ps); err != nil {
        fmt.Println("err: ", err)
        return
    } else {
        // fmt.Println(ps)
    }
    pointSet = make([]Coordinate, len(ps))
    for i, point := range ps {
        pointSet[i] = Coordinate{point[0][0], point[0][1]}
    }
    fmt.Println(PolygonContain(pointSet, Coordinate{50, 50}))   // 外部
    fmt.Println(PolygonContain(pointSet, Coordinate{62, 66}))   // 内部
    fmt.Println(PolygonContain(pointSet, Coordinate{61, 63}))   // 边上
}
